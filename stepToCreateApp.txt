- step 1: set up server using express
- step 2: html template for user interface, styling with bootstrap. Response to get request using App.get to send back the html template when user request the homepage url "/".

- step 3: response to the form being submitted, extract value the user types into the input field using App.post request for url create-item.
    - update html template for action attribute "/create-item", method attribute for form element to send back the response when user submit data. 
    - using name attribute "item" for input element to extract the data with req.body.item

- step 4: connect server to database to store data permanently, perform CRUD. (connect a node application to a mongoDB database.)
  4.1 install, setup mongodb, perform C
  - install mongodb driver for node: npm install mongodb, give nodejs the ability to work with a mongodb database.
  - we need to set up a variable to represents a MongoDB database that we've opened a connection to.
  - using async/await function: connect to database using MongoClient of mongodb package, connection string from mongodb website,.
  - create operation: app.post, create a new item for mongodb using a database environment

  4.2 how to read or load the database into the web page. Write a bit of code to load items from within our node app so we can display them to the user.
    - begin with app.get when someone send a get request. we no longer want to send back our response the millisecond this request comes in. we want to first read data from a database and then wait until that database action complete and we have the data before we actually send back our response.

    - using find() to read items collection and convert that data to an array to work with javascript using toArray().
    - the argument of toArray method is a function and it's going to call the function whenever this database action completes is what we want to happen when data is read. 

    - function(err, items), err parameter to make sure that there was not an error reading from the database. items is an array of all of our items from the database.
    - items is the array of object with property and value of items.
     {
    _id: new ObjectId("63c6e84cc09e6976dbb8e3bb"),
    text: 'starting review javascript fullstack since 01/13/23'
      }
    - we need to intertwine this value into the html template by moving html template into the function as an argument of toArray method.
    - find the spot in the html template where these list item live, and then replace hard coded data with real dynamic data from items parameter.

    - using map method for items array: map method wil return a new array that we can create based on this original array. A really convenient way of looping through items array and doing something once for each item in the items array.
    - doing something once by giving it a function, whatever we return within this function is what's going to get added on to the newly generated array.
    - there will be comma between each item, by default that's how js handles the automation conversion of an array into a string of text.
    - join() method let us convert an array into a string of text and we can control what is placed in between each item by default by including an empty pair of quotes in argument.
    - next, generate a little bit of html for each item of array items passing through by return a template literal html with ${item.text}.
    - setup, as soon as you submit the form, instead of sending you to that thank you screen, just redirects user to the same hompage. Using App.post for "/create-item" and res.redirect('/')

  4.3 Updating a database item
    - 4.3.1 how and where do we give the user a new place to begin typing their updated desire text?
        - write a bit of js for the web browser environment, so the browser send data and request to our server behind the scenes or on the fly without a hard page, refresh, reload, or redirect. this is a new technique.
        - our goal is to handle the user interface, get the user's new text value to send over to our node server.

        
    - 4.3.2 how to write a code that will talk to the mongodb database and update the item?
        -use our node server to update the document in database

  4.4
  4.5
  4.6





    -concept to understand: 
        - what is promise?
        - what the async/await syntax does?
        - when we should use it?
    - automatic node server to restart: any time we save a change to the file, node detect the change and automatically update and restart the server for us: npm install nodemon, run nodemon globally using package.json with custom script: "watch": "nodemon server", npm will look in our package.json to run the script, and look into our node_modules folder for the nodemon package. npm run watch
