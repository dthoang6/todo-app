- step 1: set up server using express
- step 2: html template for user interface, styling with bootstrap. Response to get request using App.get to send back the html template when user request the homepage url "/".

- step 3: response to the form being submitted, extract value the user types into the input field using App.post request for url create-item.
    - update html template for action attribute "/create-item", method attribute for form element to send back the response when user submit data. 
    - using name attribute "item" for input element to extract the data with req.body.item

- step 4: connect server to database to store data permanently, perform CRUD. (connect a node application to a mongoDB database.)

  4.1 install, setup mongodb, perform C

  - install mongodb driver for node: npm install mongodb, give nodejs the ability to work with a mongodb database.
  - we need to set up a variable to represents a MongoDB database that we've opened a connection to.
  - using async/await function: connect to database using MongoClient of mongodb package, connection string from mongodb website,.
  - create operation: app.post, create a new item for mongodb using a database environment

  4.2 how to read or load the database into the web page. Write a bit of code to load items from within our node app so we can display them to the user.

    - begin with app.get when someone send a get request. we no longer want to send back our response the millisecond this request comes in. we want to first read data from a database and then wait until that database action complete and we have the data before we actually send back our response.

    - using find() to read items collection and convert that data to an array to work with javascript using toArray().
    - the argument of toArray method is a function and it's going to call the function whenever this database action completes is what we want to happen when data is read. 

    - function(err, items), err parameter to make sure that there was not an error reading from the database. items is an array of all of our items from the database.
    - items is the array of object with property and value of items.
     {
    _id: new ObjectId("63c6e84cc09e6976dbb8e3bb"),
    text: 'starting review javascript fullstack since 01/13/23'
      }
    - we need to intertwine this value into the html template by moving html template into the function as an argument of toArray method.
    - find the spot in the html template where these list item live, and then replace hard coded data with real dynamic data from items parameter.

    - using map method for items array: map method wil return a new array that we can create based on this original array. A really convenient way of looping through items array and doing something once for each item in the items array.
    - doing something once by giving it a function, whatever we return within this function is what's going to get added on to the newly generated array.
    - there will be comma between each item, by default that's how js handles the automation conversion of an array into a string of text.
    - join() method let us convert an array into a string of text and we can control what is placed in between each item by default by including an empty pair of quotes in argument.
    - next, generate a little bit of html for each item of array items passing through by return a template literal html with ${item.text}.
    - setup, as soon as you submit the form, instead of sending you to that thank you screen, just redirects user to the same homepage. Using App.post for "/create-item" and res.redirect('/')

  4.3 Updating a database item

    - 4.3.1 how and where do we give the user a new place to begin typing their updated desire text?
        - write a bit of js for the web browser environment, so the browser send data and request to our server behind the scenes or on the fly without a hard page, refresh, reload, or redirect. this is a new technique.
        - at the html template, we include a js script at the body tag to test and then create a browser.js file at public folder to stay organize and load it at the html template.
        - we need to tell our Express App or server to allow incoming requests to have access to the public folder and its contents.
        - our goal is to handle the user interface, get the user's new text value to send over to our node server by using axios.post('/update-item', {text: userInput}).then().catch()
        -finish setup a browser side js code to asynchronously send a request to our node js server.
        -it means we are successfully using javascript on the front end and back end.


    - 4.3.2 how to write a code that node will talk to the mongodb database and update the item?
        - use our node server to update the document in database
        with App.post('/update-item', function(req, res) {...})

        - db.collection('items').findOneAndUpdate(a, b, c)

        - b = where we told mongo what we want to update on that document, do not need to include the full document here, only include what's being changed
         {$set: {text: req.body.text}}, req.body.text = userInput
         - c = include an anonymous function that will get called once this database action has a chance to complete. Send back a response to the browser
         - a = where we tell mongo which document we want to update. It mean we need to keep track of which edit button of item user click.
         - let's adjust our html that gets send to the homepage to include that id value for each one of items. using html file feature: data-id="${item._id}"
         - adjust our browser.js to use axios to send off our asynchronous request to our server to send along id and text of item.
         - { text: userInput, id: e.target.getAttribute("data-id") }
         - because mongodb works with id in a special way, we need to create a new instance of something called ObjectID, which is a tool of mongo package.

         - the database aspect of our update feature is complete, but our user interface aspect is not complete.
         - as soon as database update action is complete, our front end should update on the fly instead of hard refresh or user should not refresh the page. adjust then() in browser.js to manipulate html of class.

         - add 2 more tiny changes that will improve the user experience:
         - when user click edit, and cancel: wrap the axios code into the if statement
         - when user click edit, pre-populated with the current or existing value instead of being blank: begin with the edit button, look up its html ancestry, find the span element to pull in the text value of the span element.

  4.4 Deleting a database item

    - browser.js: we do the same thing for class delete-me
    - when someone clicks on one of our delete buttons, we want to program the web browser to send off a request to our node server with the id of the document that should be deleted.
  
  4.5 Adjust create item to create new item without page reload.
  - in many situations, you would want a traditional form submit.
  - we set up our update, delete features to use on the fly or asynchronous requests.
  - we may improve our create feature to use asynchronous request to.
  
  4.6

db.collection('items').insertOne(a, b)
db.collection('items').findOneAndUpdate(a, b, c)
db.collection('items').find().toArray(function(err, items){...})
db.collection('items').deleteOne(a, b)

    -concept to understand: 
        - what is promise?
        - what the async/await syntax does?
        - when we should use it?
    - automatic node server to restart: any time we save a change to the file, node detect the change and automatically update and restart the server for us: npm install nodemon, run nodemon globally using package.json with custom script: "watch": "nodemon server", npm will look in our package.json to run the script, and look into our node_modules folder for the nodemon package. npm run watch

    - POST request: we an send post request by submitting the form, or using axios.post(a, b).then(c).catch(d) or fetch to send post request on the fly. server will receive the request using app.post(a, b)
